{
	"info": {
		"_postman_id": "fe68d218-7d0f-46eb-8ec1-178e6a0443ed",
		"name": "vadim",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HW_1",
			"item": [
				{
					"name": "EP_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/get_method?name=Kirill&age=35",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "Kirill"
								},
								{
									"key": "age",
									"value": "35"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Kirill",
									"type": "text"
								},
								{
									"key": "age",
									"value": "35",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "2000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_1?name=Kirill&age=35&weight=82",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "Kirill"
								},
								{
									"key": "age",
									"value": "35"
								},
								{
									"key": "weight",
									"value": "82"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_2\n?name=Kirill&age=35&salary=2999",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_2\n"
							],
							"query": [
								{
									"key": "name",
									"value": "Kirill"
								},
								{
									"key": "age",
									"value": "35"
								},
								{
									"key": "salary",
									"value": "2999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Kirill&age=35&salary=5699",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Kirill"
								},
								{
									"key": "age",
									"value": "35"
								},
								{
									"key": "salary",
									"value": "5699"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_6",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Kirill&age=35&salary=8000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Kirill"
								},
								{
									"key": "age",
									"value": "35"
								},
								{
									"key": "salary",
									"value": "8000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_7",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Kirill",
									"type": "text"
								},
								{
									"key": "age",
									"value": "35",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "4565",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://162.55.220.72:5005/get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let resp_json = {",
									"    \"age\": \"35\",",
									"    \"family\": {",
									"        \"children\": [",
									"            [",
									"                \"Alex\",",
									"                24",
									"            ],",
									"            [",
									"                \"Kate\",",
									"                12",
									"            ]",
									"        ],",
									"        \"u_salary_1_5_year\": 140",
									"    },",
									"    \"name\": \"Kirill\",",
									"    \"salary\": 35",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Kirill",
									"type": "text"
								},
								{
									"key": "age",
									"value": "35",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "35",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "/s34lfgbj/Vadim/jjd909/4594kjkWpqc94123r23r3r436324evny",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/get_test_user",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_2",
			"item": [
				{
					"name": "EP_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Проверить Статус код 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Проверить, что в body приходит правильный string",
									"pm.test(\"Test string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}first",
							"host": [
								"{{url}}first"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Спарсить response body в json",
									"let jsonData = pm.response.json();",
									"",
									"//Переводим string в number",
									"//let salary = +jsonData.salary",
									"let age = +jsonData.age",
									"",
									"",
									"//Проверить, что name в ответе равно name в request",
									"pm.test(\"Test name\", function () {",
									"    pm.expect(jsonData.name).to.eql(\"Kirill\");",
									"});",
									"",
									"//Проверить, что age в ответе равно age в request",
									"pm.test(\"Test age\", function () {",
									"    pm.expect(age).to.eql(35);",
									"});",
									"",
									"//Проверить, что salary в ответе равно salary в request",
									"pm.test(\"Test salary\", function () {",
									"    pm.expect(jsonData.salary).to.eql(2500);",
									"});",
									"",
									"",
									"// Спарсить request",
									"let parsReguest = request.data;",
									"",
									"//вывести в консоль спарсенный request",
									"console.log(\"parsReguest\" , parsReguest)",
									"",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)",
									"pm.test(\"Test name request\", function () {",
									"    pm.expect(jsonData.name).to.eql(parsReguest.name);",
									"});",
									"",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)",
									"pm.test(\"Test age request\", function () {",
									"    pm.expect(jsonData.age).to.eql(parsReguest.age);",
									"});",
									"",
									"//Переводим string в number ",
									"let reqSalary = +parsReguest.salary  ",
									"",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
									"pm.test(\"Test salary request\", function () {",
									"    pm.expect(jsonData.salary).to.eql(reqSalary);",
									"});",
									"",
									"//Вывести в консоль параметр family из response.",
									"console.log (\"Family\", jsonData.family)",
									"",
									"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
									"pm.test(\"Test salary response vs request\", function () {",
									"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqSalary*4);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Kirill",
									"type": "text"
								},
								{
									"key": "age",
									"value": "35",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "2500",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}user_info_3",
							"host": [
								"{{url}}user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Спарсить response body в json.",
									"let jsonData = pm.response.json();",
									"",
									"//Спарсить request",
									"let parsReguest = pm.request.url.query.toObject()",
									"",
									"//проверка типа данных",
									"//console.log (\"All response\", jsonData)",
									"//console.log (\"All request \", parsReguest)",
									"",
									"",
									"// Проверить, что name в ответе равно name s request (name забрать из request.)",
									"pm.test(\"Test name response vs name request\", function () {",
									"    pm.expect(jsonData.name).to.eql(parsReguest.name);",
									"});",
									"",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)",
									"pm.test(\"Test age response vs age request\", function () {",
									"    pm.expect(jsonData.age).to.eql(parsReguest.age);",
									"});",
									"",
									"",
									"//Переводим string в number ",
									"let requestSalary = +parsReguest.salary",
									"",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
									"pm.test(\"Test salary response vs salary request\", function () {",
									"    pm.expect(jsonData.salary).to.eql(requestSalary);",
									"});",
									"",
									"//Вывести в консоль параметр family из response.",
									"console.log(\"Family\", jsonData.family)",
									"",
									"//Проверить, что у параметра dog есть параметры name.",
									"pm.test(\"Dog have name\", function () {",
									"    pm.expect(jsonData.family.pets.dog).to.include.keys(\"name\");",
									"});",
									"",
									"//Проверить, что у параметра dog есть параметры age",
									"pm.test(\"Dog have age\", function () {",
									"    pm.expect(jsonData.family.pets.dog).to.include.keys(\"age\");",
									"});",
									"",
									"//Проверить, что параметр name имеет значение Luky",
									"pm.test(\"Name is Luky\", function () {",
									"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");",
									"});",
									"",
									"//Проверить, что параметр age имеет значение 4",
									"pm.test(\"Age is 4\", function () {",
									"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Kirill",
									"type": "text",
									"disabled": true
								},
								{
									"key": "age",
									"value": "35",
									"type": "text",
									"disabled": true
								},
								{
									"key": "salary",
									"value": "4000",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}object_info_3?name=Kirill&age=35&salary=4000",
							"host": [
								"{{url}}object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Kirill"
								},
								{
									"key": "age",
									"value": "35"
								},
								{
									"key": "salary",
									"value": "4000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Спарсить response body в json.",
									"let parse_response = pm.response.json();",
									"let response_name = parse_response.name",
									"",
									"//Спарсить request",
									"let parse_request = pm.request.url.query.toObject()",
									"let parse_request_age = +parse_request.age",
									"let parse_request_salary = +parse_request.salary",
									"",
									"",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)",
									"pm.test(\"Name request == name response\", function () {",
									"    pm.expect(response_name).to.eql(parse_request.name);",
									"});",
									"",
									"//Проверить, что age в ответе равно age из request (age забрать из request.)",
									"pm.test(\"Nmae request == name response\", function () {",
									"    pm.expect(parse_response.age).to.eql(parse_request_age);",
									"});",
									"",
									"//Вывести в консоль параметр salary из request.",
									"console.log(\"Requset Salary =\", parse_request.salary)",
									"",
									"//Вывести в консоль параметр salary из response.",
									"console.log(\"Response Salary = \", parse_response.salary)",
									"",
									"//Вывести в консоль 0-й элемент параметра salary из response",
									"console.log(\"Response Salary 0 =\", parse_response.salary[0])",
									"",
									"//Вывести в консоль 1-й элемент параметра salary параметр salary из response",
									"console.log(\"Response Salary 1 =\", parse_response.salary[1])",
									"",
									"//Вывести в консоль 2-й элемент параметра salary параметр salary из response",
									"console.log(\"Response Salary 2 =\", parse_response.salary[2])",
									"",
									"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
									"pm.test(\"Response salary 0 == Request salary\", function () {",
									"    pm.expect(parse_response.salary[0]).to.eql(parse_request_salary);",
									"});",
									"",
									"resp_salary_1 = +parse_response.salary[1]",
									"",
									"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
									"pm.test(\"Response salary 1 == Request salary\", function () {",
									"    pm.expect(resp_salary_1).to.eql(parse_request_salary*2);",
									"});",
									"",
									"let resp_salary_2 = +parse_response.salary[2]",
									"",
									"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
									"pm.test(\"Response salary 1 == Request salary\", function () {",
									"    pm.expect(resp_salary_2).to.eql(parse_request_salary*3);",
									"});",
									"",
									"//Создать в окружении переменную name",
									"//Создать в окружении переменную age",
									"//Создать в окружении переменную salary",
									"",
									"//Передать в окружение переменную name",
									"pm.environment.set(\"name\", parse_request.name);",
									"",
									"//Передать в окружение переменную age",
									"pm.environment.set(\"age\", parse_request_age);",
									"",
									"//Передать в окружение переменную salary",
									"pm.environment.set(\"salary\", parse_request.salary);",
									"",
									"",
									"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
									"let response_salary = parse_response.salary",
									"for (let i = 0; i <= 2; i++) {",
									"\tconsole.log(\"Cycle salary\" , response_salary[i]);",
									"}",
									"",
									"//либо так",
									"for (let i = 0; i < response_salary.length; i += 1) {",
									"  console.log(\"TEST\" , response_salary[i]);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Вставить параметр salary из окружения в request",
									"//Вставить параметр age из окружения в age",
									"//Вставить параметр name из окружения в name",
									"",
									"//Статус код 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Спарсить response body в json.",
									"let respData = pm.response.json();",
									"let salar1 = (respData[\"qa_salary_after_1.5_year\"]);",
									"let salar2 = (respData[\"qa_salary_after_3.5_years\"]);",
									"",
									"//Спарсить request",
									"let reqData = request.data;",
									"let reqSalary = +reqData.salary;",
									"",
									"//Проверить, что json response имеет параметр start_qa_salary",
									"pm.test(\"JSON response have start_qa_salary \", function () {",
									"    pm.expect(respData).to.have.property(\"start_qa_salary\");",
									"});",
									"",
									"//Проверить, что json response имеет параметр qa_salary_after_6_months",
									"pm.test(\"JSON response have qa_salary_after_6_months \", function () {",
									"    pm.expect(respData).to.have.property(\"qa_salary_after_6_months\");",
									"});",
									"",
									"//Проверить, что json response имеет параметр qa_salary_after_12_months",
									"pm.test(\"JSON response have qa_salary_after_12_months \", function () {",
									"    pm.expect(respData).to.have.property(\"qa_salary_after_12_months\");",
									"});",
									"",
									"//Проверить, что json response имеет параметр qa_salary_after_1.5_year",
									"pm.test(\"JSON response have qa_salary_after_1.5_year\", function () {",
									"    pm.expect(respData).to.have.property(\"qa_salary_after_1.5_year\");",
									"});",
									"",
									"//Проверить, что json response имеет параметр qa_salary_after_3.5_years",
									"pm.test(\"JSON response have qa_salary_after_3.5_years\", function () {",
									"    pm.expect(respData).to.have.property(\"qa_salary_after_3.5_years\");",
									"});",
									"",
									"//Проверить, что json response имеет параметр person",
									"pm.test(\"JSON response have person\", function () {",
									"    pm.expect(respData).to.have.property(\"person\");",
									"});",
									"",
									"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
									"pm.test(\"respData.start_qa_salary ===salary from request\", function () {",
									"    pm.expect(respData.start_qa_salary).to.eql(reqSalary);",
									"});",
									"",
									"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
									"pm.test(\"a_salary_after_6_months === salary*2 from request\", function () {",
									"    pm.expect(respData.qa_salary_after_6_months).to.eql(reqSalary*2);",
									"});",
									"",
									"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
									"pm.test(\"qa_salary_after_12_months === salary*2.7 from request\", function () {",
									"    pm.expect(respData.qa_salary_after_12_months).to.eql(reqSalary*2.7);//проверить результат",
									"});",
									"",
									"",
									"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
									"pm.test(\"qa_salary_after_1.5_year === salary*3.3 from request\", function () {",
									"    pm.expect(salar1).to.eql(reqSalary*3.3);",
									"});",
									"",
									"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
									"pm.test(\"qa_salary_after_3.5_year === salary*3.8 from request\", function () {",
									"    pm.expect(salar2).to.eql(reqSalary*3.8);",
									"});",
									"",
									"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
									"pm.test(\"First element person u_name === request salary\", function () {",
									"    pm.expect(respData.person.u_name[1]).to.eql(reqSalary);",
									"});",
									"",
									"//Проверить, что что параметр u_age равен age из request (age забрать из request.)",
									"pm.test(\"u_gae === request age\", function () {",
									"    pm.expect(respData.u_age).to.eql(reqSalary.age);",
									"});",
									"",
									"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
									"pm.test(\"u_salary_5_years === salary*4.2 from request\", function () {",
									"    pm.expect(respData.person[\"u_salary_5_years\"]).to.eql(reqSalary*4.2);",
									"});",
									"",
									"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
									"",
									"for(let KEY in respData.person) {",
									"   if(typeof(respData.person[KEY]) == \"object\"){",
									"       for(let i = 0; i < Object.keys(respData.person[KEY]).length; i++){",
									"           console.log(respData.person[KEY][i]);",
									"       }",
									"   }",
									"   else if(typeof(respData.person[KEY]) != \"object\") {",
									"        console.log(respData.person[KEY]);",
									"   }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}user_info_2",
							"host": [
								"{{url}}user_info_2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}